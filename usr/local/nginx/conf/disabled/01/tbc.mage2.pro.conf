# 2018-08-26 https://gist.github.com/zaru/82c487c67ee25b55a3bd4c9ba926850c
# 2018-08-27
# How to setup a static IP address for outbound connections from applications to corporate firewalls
# using Nginx as a reverse proxy? https://df.tips/t/812
upstream tbc_ngrok_io {server tbc.ngrok.io:443; keepalive 128;}
server {
	listen 80;
	server_name tbc.mage2.pro;
	return 301 https://$server_name$request_uri;
}
server {
	listen 443 ssl http2;
	server_name tbc.mage2.pro;
	ssl_certificate /etc/letsencrypt/live/tbc.mage2.pro/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/tbc.mage2.pro/privkey.pem;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	proxy_set_header X-Forwarded-Proto $scheme;
	location ~ /.well-known {
		access_log off;
		# 2017-05-31 The directives order is not important: https://df.tips/t/224
		break;
		expires max;
		root /var/www/lets-encrypt/tbc.mage2.pro;
	}
	location ~ /\. {deny all;}
	location / {
		access_log off;
		proxy_http_version 1.1;
		# 2018-08-27
		# «Sets the text that should be changed in the “Location” and “Refresh” header fields
		# of a proxied server response.
		# Suppose a proxied server returned the header field
		#	`Location: http://localhost:8000/two/some/uri/`.
		# The directive `proxy_redirect http://localhost:8000/two/ http://frontend/one/;`
		# will rewrite this string to `Location: http://frontend/one/some/uri/`.»
		# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect
		proxy_redirect off;
		proxy_set_header Connection "";
		proxy_set_header Host tbc.ngrok.io;
		# 2018-08-27 Dmitry Fedyuk
		# 1) «Securing HTTP Traffic to Upstream Servers»:
		# https://docs.nginx.com/nginx/admin-guide/security-controls/securing-http-traffic-upstream
		# 2) «Specifies a file with the certificate in the PEM format
		# used for authentication to a proxied HTTPS server.»
		# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_certificate
		# 3) I have set it to the same value as for `proxy_ssl_certificate_key`
		# because the `.pem` file contains the both certificate and its key.
		proxy_ssl_certificate /usr/local/nginx/conf/assets/securepay.ufc.ge/.pem;
		# 2018-08-27 Dmitry Fedyuk
		# 1) «Specifies a file with the secret key in the PEM format
		# used for authentication to a proxied HTTPS server.»
		# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_certificate_key
		# 2) I have set it to the same value as for `proxy_ssl_certificate`
		# because the `.pem` file contains the both certificate and its key.
		proxy_ssl_certificate_key /usr/local/nginx/conf/assets/securepay.ufc.ge/.pem;
		# 2018-08-27 Dmitry Fedyuk
		# «Specifies a file with passphrases for secret keys
		# where each passphrase is specified on a separate line.
		# Passphrases are tried in turn when loading the key.»
		# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_password_file
		proxy_ssl_password_file /usr/local/nginx/conf/assets/securepay.ufc.ge/password.txt;
		# 2018-08-27
		# 1) As I understand, I do not need the rule:
		#	`proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;`
		# because I do not want to show my real server IP address to TBC Bank.
		# As I see, if the `X-Forwarded-For` rule is omitted,
		# Nginx automatically adds its own `X-Forwarded-For` header to the backend's requests
		# with the IP address of the proxy server. It is exactly what I need.
		# 2) As I understand, I do not need the rules too:
		#	proxy_set_header X-CSRF-Token $http_x_csrf_token;
		#	proxy_set_header X-Forwarded-Host $http_host;
		#	proxy_set_header X-Forwarded-Proto $scheme;
		#	proxy_set_header X-Real-IP $remote_addr;
		proxy_pass https://tbc_ngrok_io;
	}
}