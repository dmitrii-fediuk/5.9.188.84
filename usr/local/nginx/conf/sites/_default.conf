server {
	# 2023-06-18
	# 1) «In this configuration nginx tests only the request’s header field “Host”
	# to determine which server the request should be routed to.
	# If its value does not match any server name, or the request does not contain this header field at all,
	# then nginx will route the request to the default server for this port.
	# In the configuration above, the default server is the first one — which is nginx’s standard default behaviour.
	# It can also be set explicitly which server should be default,
	# with the `default_server` parameter in the listen directive»
	# http://nginx.org/en/docs/http/request_processing.html
	# 2) https://serverfault.com/a/841653
	listen 80 default_server;
	listen 443 ssl http2 default_server;
	# 2023-06-18
	# 1) «In catch-all server examples the strange name “_” can be seen.
	# There is nothing special about this name, it is just one of a myriad of invalid domain names
	# which never intersect with any real name.
	# Other invalid names like “--” and “!@#” may equally be used.»:
	# http://nginx.org/en/docs/http/server_names.html#miscellaneous_names
	# 2) http://nginx.org/en/docs/http/ngx_http_core_module.html#server_name
	server_name _;
	ssl_certificate /etc/letsencrypt/live/tr.guide/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/tr.guide/privkey.pem;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	# 2023-06-18
	return 404;
	# «https://206463vashon1614iwad.com.tr.guide/c/nodejs/16» => «https://df.tips/c/nodejs/16»
	# rewrite ^ https://df.tips$request_uri? permanent;
	# «How to prevent processing requests with undefined server names»:
	# https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
	# return 406;
}